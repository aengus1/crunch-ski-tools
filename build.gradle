import java.text.SimpleDateFormat
buildscript {
    ext {
        mockitoVersion = "2.25.0"
        powerMockVersion = "2.0.7"
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    // plugin to publish to maven
    id 'maven-publish'
    //release plugin for versioning on old version due to this bug https://github.com/allegro/axion-release-plugin/issues/270
    id 'org.ajoberstar.reckon' version '0.12.0'
    // coverage
    id 'jacoco'
}

group = 'ski.crunch'
sourceCompatibility = '11'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    // this block is required for the maven-publish plugin to work properly
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }

}
// Sem Ver.....
reckon {
    scopeFromProp()
    stageFromProp('beta', 'rc', 'final')
}

reckonTagPush {
    // force this task to run every time it is called
    doLast {
        println "Ensuring this task is not skipped"
    }
}
reckonTagCreate.dependsOn check

task versionTxt()  {
    doLast {
        new File(projectDir, "version.txt").text = """
Version: $version
Revision: ${grgit.head().abbreviatedId}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: tools
"""
    }
}
build.dependsOn versionTxt


// Package Registry publishing...
publishing {
    publications {
        tools(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/20583220/packages/maven"
            name "GitLab_Private_Repo"
            credentials(HttpHeaderCredentials) {
                name = 'Private-Token'
                value = project.gitlabAccessToken
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}
repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter'
    )
    compile('info.picocli:picocli-spring-boot-starter:4.5.0')
    compile('com.jcraft:jsch:0.1.54')
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.8.1.202007141445-r'
    compile('org.yaml:snakeyaml:1.26')
    compile('org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:5.8.1.202007141445-r')
    compile('com.maximeroussy.invitrode:invitrode:2.0.1') //https://github.com/maximeroussy/invitrode
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'


    testCompile 'com.github.stefanbirkner:system-lambda:1.1.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation(
            // see compatability list between mockito and powermock here: https://github.com/powermock/powermock/wiki/Mockito#supported-versions
            "org.mockito:mockito-core:${mockitoVersion}",
            "org.powermock:powermock-module-junit4:${powerMockVersion}",
            "org.powermock:powermock-api-mockito2:${powerMockVersion}"
    )
}

// Coverage
jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

bootRun {
    systemProperty "app.envrepo.password", findProperty("app.envrepo.password")
}
test {
    systemProperty "app.envrepo.password", findProperty("app.envrepo.password")
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}


jacocoTestReport {
    dependsOn test
}

configurations { codacy }

dependencies {
    codacy 'com.codacy:codacy-coverage-reporter:latest.release'
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    group = "report"
    description = "sends coverage report to codacy.  requires CODACY_PROJECT_TOKEN environment variable to be set"
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/jacoco/test/jacocoTestReport.xml"
    ]
}